# Configuration for running Cortex in single-process mode.
# This configuration should not be used in production.
# It is only for getting started and development.

# Disable the requirement that every request to Cortex has a
# X-Scope-OrgID header. `fake` will be substituted in instead.
auth_enabled: false
target: all

server:
  http_listen_port: 9009

  # Configure the server to allow messages up to 100MB.
  grpc_server_max_recv_msg_size: 104857600
  grpc_server_max_send_msg_size: 104857600
  grpc_server_max_concurrent_streams: 1000
  log_level: debug

api:
  response_compression_enabled: true

distributor:
  shard_by_all_labels: true
  pool:
    health_check_ingesters: true
  ha_tracker:
    enable_ha_tracker: true
    kvstore:
      store: consul
      prefix: cortex-collectors/
      consul:
        host: consul:8500
        consistent_reads: true
  ring:
    kvstore:
      store: consul
      prefix: cortex-collectors/
      consul:
        host: consul:8500
        consistent_reads: true

ingester_client:
  grpc_client_config:
    # Configure the client to allow messages up to 100MB.
    max_recv_msg_size: 104857600
    max_send_msg_size: 104857600
    grpc_compression: gzip

ingester:
  # We want our ingesters to flush chunks at the same time to optimise
  # deduplication opportunities.
  spread_flushes: true
  chunk_age_jitter: 0

  walconfig:
    wal_enabled: true
    recover_from_wal: true
    wal_dir: /tmp/cortex/wal
    flush_on_shutdown_with_wal_enabled: true

  lifecycler:
    # The address to advertise for this ingester.  Will be autodiscovered by
    # looking up address on eth0 or en0; can be specified if this fails.
    # address: 127.0.0.1

    # We want to start immediately and flush on shutdown.
    join_after: 0
    min_ready_duration: 0s
    final_sleep: 0s
    num_tokens: 512
    tokens_file_path: /tmp/cortex/wal/tokens
    ring:
      kvstore:
        store: consul
        prefix: cortex-collectors/
        consul:
          host: consul:8500
          consistent_reads: true
      replication_factor: 3

storage:
  engine: blocks
  aws:
    endpoint: "minio:9000"
    bucketnames: cortex
    secret_access_key: wJalrXUtnFEMI/K7MDENG/bPxRfiCYEXAMPLEKEY
    access_key_id: AKIAIOSFODNN7EXAMPLE
    insecure: true
purger:
  object_store_type: filesystem

frontend_worker:
  # Configure the frontend worker in the querier to match worker count
  # to max_concurrent on the queriers.
  match_max_concurrent: true

# Configure the ruler to scan the /tmp/cortex/rules directory for prometheus
# rules: https://prometheus.io/docs/prometheus/latest/configuration/recording_rules/#recording-rules
ruler:
  enable_api: true
  enable_sharding: true
  storage:
    type: s3
    # type: s3
    local:
      directory: /tmp/cortex/rules
    s3:
      endpoint: "minio:9000"
      bucketnames: cortex
      secret_access_key: wJalrXUtnFEMI/K7MDENG/bPxRfiCYEXAMPLEKEY
      access_key_id: AKIAIOSFODNN7EXAMPLE
      insecure: true
      s3forcepathstyle: true
  ring:
    kvstore:
      store: consul
      prefix: cortex-collectors/rulers/
      consul:
        host: consul:8500
        consistent_reads: true
  alertmanager_url: http://alertmanager:9093

alertmanager:
  enable_api: true
  data_dir: /tmp/alertmanager
  external_url: http://127.0.0.1:9009/alertmanager
  storage:
    type: s3
    s3:
      endpoint: "minio:9000"
      bucketnames: cortex
      secret_access_key: wJalrXUtnFEMI/K7MDENG/bPxRfiCYEXAMPLEKEY
      access_key_id: AKIAIOSFODNN7EXAMPLE
      insecure: true

# MINIO_ACCESS_KEY: AKIAIOSFODNN7EXAMPLE
# MINIO_SECRET_KEY: wJalrXUtnFEMI/K7MDENG/bPxRfiCYEXAMPLEKEY
blocks_storage:
  backend: s3
  s3:
    endpoint: "minio:9000"
    bucket_name: cortex
    secret_access_key: wJalrXUtnFEMI/K7MDENG/bPxRfiCYEXAMPLEKEY
    access_key_id: AKIAIOSFODNN7EXAMPLE
    insecure: true
  tsdb:
    flush_blocks_on_shutdown: true
  bucket_store:
    max_chunk_pool_bytes: 209715200 # 200MB
    index_cache:
      backend: memcached
      memcached:
        addresses: dns+memcached:11211
    chunks_cache:
      backend: memcached
      memcached:
        addresses: dns+memcached:11211
    metadata_cache:
      backend: memcached
      memcached:
        addresses: dns+memcached:11211
store_gateway:
  sharding_enabled: true
  sharding_ring:
    kvstore:
      store: consul
      prefix: cortex-collectors/
      consul:
        host: consul:8500
        consistent_reads: true
    replication_factor: 3

compactor:
  block_ranges:
    - 0h1m0s
    - 0h15m0s
    - 0h30m0s
  sharding_enabled: true
  sharding_ring:
    kvstore:
      store: consul
      prefix: cortex-collectors/
      consul:
        host: consul:8500
        consistent_reads: true
